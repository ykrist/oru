#!/usr/bin/env python

import json
import argparse
import sys
import re
from pathlib import Path
from oru.posix import setup_sigpipe, open_default_stdin, open_default_stdout
from oru.json import resolve_files

def log(msg):
    print(msg, file=sys.stderr)


if __name__ == '__main__':
    p = argparse.ArgumentParser()
    p.add_argument("input", default='-', nargs="?")
    p.add_argument("output", default="-", nargs="?")
    p.add_argument("-v", "--verbose", action='store_true')
    p.add_argument("-m", "--match", default=r"\.json$",
                   help="REGEXP to match strings by, default is '%(default)s'.")
    p.add_argument("-d", "--dir", default=None, type=Path,
                   help="Find files relative to %(metavar)s rather than relative to the input file."
                        " If input is STDIN this option is implied with %(metavar)s = current working directory.")
    args = p.parse_args()
    if args.dir is None and args.input == "-":
        args.dir = Path.cwd()
    setup_sigpipe()

    try:
        with open_default_stdin(args.input) as fp:
            d = json.load(fp)
    except Exception as e:
        log("error: unable to read input file: " + str(e))
        sys.exit(1)

    try:
        pattern = re.compile(args.match)
    except Exception as e:
        log("error: bad regexp: " + str(e))
        sys.exit(1)

    rootpath = args.dir if args.dir is not None else Path(args.input).parent
    d = resolve_files(d, rootpath, pattern, callback=lambda _, msg: log(msg) if args.verbose else None)

    try:
        with open_default_stdout(args.output) as fp:
            json.dump(d, fp)
            fp.write("\n")
            
    except Exception as e:
        log("error: unable to write to file: " + str(e))
        sys.exit(1)