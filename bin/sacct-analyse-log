#!/usr/bin/env python
import pandas as pd
from pathlib import Path
import re
import argparse
from oru import posix
if __name__ == '__main__':
    posix.setup_sigpipe()
    p = argparse.ArgumentParser()
    p.add_argument('log', nargs='?', default='-')
    args = p.parse_args()

    pd.options.display.max_rows = 999
    with posix.open_default_stdin(args.log, mode='r') as fp:
        log = pd.read_csv(fp, index_col="JobID")

    prop_time = log['ElapsedRaw']/log['TimelimitRaw']
    prop_mem = log['MaxRSS']/log['ReqMem']

    mask_fail = log['State'] != 'COMPLETED'
    mask_timeout = log['State'] == 'TIMEOUT'
    mask_mem = prop_mem > .85

    for c in ['MaxRSS', 'ReqMem']:
        log[c + "-f"] = log[c].apply(lambda mem : f"{mem*10/2**30:.2f}Gb")

    display_cols = ['Elapsed', 'Timelimit', 'MaxRSS-f', 'ReqMem-f', 'State']

    
    timeouts = log.loc[mask_timeout, display_cols]

    if len(timeouts) > 0:
        print('Timeouts:')
        print(timeouts)



    oom = log.loc[mask_mem & mask_fail & ~mask_timeout, display_cols]
    if len(oom) > 0:
        print("\nLikely needs more memory:")
        print(oom)

    other_fail = log.loc[~mask_mem & mask_fail & ~mask_timeout, display_cols]
    if len(other_fail) > 0:
        print('\nOther failures:')
        print(other_fail)
